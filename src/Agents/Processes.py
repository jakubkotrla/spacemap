## @package Agents.Processes
# Contains Processes, collection of Process.
# Based on source from Tomas Korenko, changed

## Represents process that agent can do.
class Process:
    def __init__(self, name, intentions, sources, usedSources=[], newObjects=[], durationTime=0, baseTimeLimit=86400, iteration=1):
        self.name          = name
        ## Intentions generated by process.
        self.intentions    = intentions
        ## Required affordances.
        self.sources       = sources
        self.usedSources   = usedSources    #not implemented
        self.newObjects    = newObjects     #not implemented
        self.baseTimeLimit = baseTimeLimit  #not implemented
        self.durationTime  = durationTime
        self.iteration     = iteration      #not implemented
        self.pleasure      = 0              #not implemented
        self.intensity     = 0              #not implemented
        
    def HasSources(self):
        return len(self.sources) > 0

## Holds all agent's possible processes.
class Processes:
    def __init__(self):
        self.atomic = { "MoveTo"   : Process("MoveTo",[],[],[],[]),
                        "MoveToPartial"   : Process("MoveToPartial",[],[],[],[]),
                        "Explore"  : Process("Explore",[],[],[],[]),
                        "Execute"  : Process("Execute",[],[],[],[]),
                        "ExecuteGet"  : Process("ExecuteGet",[],[],[],[]),
                        "ExecuteReal"  : Process("ExecuteReal",[],[],[],[]),
                        "LookUpInMemory"  : Process("LookUpInMemory",[],[],[],[]),
                        "Remember"  : Process("Remember",[],[],[],[]),
                        "LookForObject"  : Process("LookForObject",[],[],[],[]),
                        "SearchRandom"  : Process("SearchRandom",[],[],[],[]),
                        "ActionOut"  : Process("ActionOut",[],[],[],[], 10)     #special atomic action to emulate state when agent is out of world
                        }        
        self.processes = {}
    
    def AddProcess(self, process):
        self.processes[process.name] = process
